{"version":3,"sources":["serviceWorker.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Square","props","className","onClick","value","Board","i","j","this","squares","renderSquare","React","Component","Game","state","history","moveDesc","isXNext","stepNumber","current","length","_","cloneDeep","calculateWinner","setState","concat","flexName","step","slice","status","winner","moves","map","move","desc","key","type","jumpTo","handleClick","reverseOrder","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.bced3d48.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport _ from \"lodash\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Square(props) {\n  return(\n      <button className=\"square\"\n              onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n  }\n\nclass Board extends React.Component {\n  renderSquare(i,j) {\n    return (<Square\n              value={this.props.squares[i][j]}\n              onClick={() => this.props.onClick(i,j)}\n              />\n            );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0,0)}\n          {this.renderSquare(0,1)}\n          {this.renderSquare(0,2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(1,0)}\n          {this.renderSquare(1,1)}\n          {this.renderSquare(1,2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(2,0)}\n          {this.renderSquare(2,1)}\n          {this.renderSquare(2,2)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      history: [{\n        squares: [\n          [null, null, null],\n          [null, null, null],\n          [null, null, null]\n        ],\n        moveDesc: '',\n      }],\n      isXNext: true,\n      stepNumber: 0,\n    };\n  }\n\n  handleClick(i,j){\n\n    const history = [...this.state.history];\n    const current = history[history.length-1];\n    const squares = _.cloneDeep(current.squares);\n    if (calculateWinner(squares) || squares[i][j] ) {\n      return;\n    }\n    squares[i][j] = this.state.isXNext ? 'X' : 'O';\n\n\n    this.setState({\n      history: this.state.history.concat( [{\n        squares: squares,\n        moveDesc: \"Placed an \\\"\" + (this.state.isXNext ? 'X' : 'O') + \"\\\" in row \" + (i+1) + \", column \" + (j+1),\n      }] ),\n      isXNext: !this.state.isXNext,\n      stepNumber: history.length,\n//      toggle: true,\n      flexName: \"Ascending\"\n    });\n\n  }\n\n  jumpTo(step) {\n    this.setState({\n      history: this.state.history.slice(0,step+1),\n      stepNumber: step,\n      isXNext: (step%2 === 0),\n    });\n  }\n\n  reverseOrder(){\n    this.setState({\n        flexName: this.state.flexName === \"Ascending\" ? \"Descending\" : \"Ascending\",\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map( (step,move) => {\n      const desc = move ?\n        'Go To Move #' + move + \": \" + history[move].moveDesc:\n        'Start a New Game';\n        return (\n          <li key={move}>\n            <button className=\"btn btn-outline-secondary\"\n                    type=\"button\"\n                    onClick={() => this.jumpTo(move)}>{desc}</button>\n          </li>\n        );\n    });\n\n\n\n    let status;\n    if (winner) {\n      status = winner;\n    } else {\n      status = \"Make a move player  \" + (this.state.isXNext ? \"X\" : \"O\");\n    }\n    return (\n      <div className=\"wrapper\">\n              <h1>Let's Play Tic-Tac-Toe!</h1>\n                        <div className=\"status\">{status}</div>\n        <div className=\"game container-fluid\">\n          <div className=\"row\">\n\n          <div className=\"game-board col-sm\">\n            <Board\n              squares={current.squares}\n              onClick={(i,j) => this.handleClick(i,j)}\n              />\n          </div>\n\n          <div className=\"game-info col-sm\">\n            <h4>Move History</h4>\n            <ol className={this.state.flexName}>{moves}</ol>\n\n          <button type=\"button\"\n                  className=\"btn btn-outline-dark\"\n                  onClick={() => this.reverseOrder()}>Reverse Order of Moves</button>\n\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n\n  //look for horizontal wins\n  for (let i=0; i<3; i++) {\n    if (squares[i][0] === squares[i][1] && squares[i][1] === squares[i][2]) {\n      if (!squares[i][0]) {\n        return null;\n      } else {\n        return 'The winner is ' + squares[i][0];\n      }\n    }\n  }\n  //look for vertical wins\n  for (let i=0; i<3; i++) {\n    if (squares[0][i] === squares[1][i] && squares[0][i] === squares[2][1] && squares[1][i]=== squares[2][i]) {\n      if (!squares[0][i]) {\n        return null;\n      } else {\n        return 'The winner is ' + squares[0][i];\n      }\n    }\n  }\n  //look for diagonal wins (there are only 2 possibilities)\n  if ( (squares[0][0] === squares[1][1] && squares[1][1]=== squares[2][2]) ||\n      (squares[2][0] === squares[1][1] && squares [1][1] === squares[0][2]) ) {\n        if ( !squares[1][1] ){\n          return null;\n        } else {\n          return 'The winner is ' + squares[1][1];\n        }\n      }\n\n  /*\n  //check for draw\n  let check = 0;\n  for (let i=0; i<3; i++) {\n    for (let j=0; j<3; j++) {\n      if (!squares[i][j]) {\n        check++;\n      }\n    }\n  }\n  if (check === 0 ) {\n    return 'Game Over: DRAW!'\n  } else {\n    return null;\n  }\n\n*/\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}